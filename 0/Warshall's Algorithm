import java.util.Scanner;

public class WarshallAlgorithm {
    final static int INF = 99999;
    
    void warshall(int graph[][], int numVertices) {
        int reach[][] = new int[numVertices][numVertices];
        int i, j, k;
        
        // Initialize the reachability matrix same as the input graph matrix
        for (i = 0; i < numVertices; i++)
            for (j = 0; j < numVertices; j++)
                reach[i][j] = graph[i][j];
        
        // Adding vertices individually
        for (k = 0; k < numVertices; k++) {
            for (i = 0; i < numVertices; i++) {
                for (j = 0; j < numVertices; j++) {
                    reach[i][j] = (reach[i][j] != 0) || ((reach[i][k] != 0) && (reach[k][j] != 0)) ? 1 : 0;
				}
            }
        }
        printSolution(reach, numVertices);
    }
    void printSolution(int reach[][], int numVertices) {
        System.out.println("Transitive Closure:");
        for (int i = 0; i < numVertices; i++) {
            for (int j = 0; j < numVertices; j++) {
                System.out.print(reach[i][j] + " ");
            }
            System.out.println();
        }
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.print("Enter the number of vertices in the graph: ");
        int numVertices = sc.nextInt();
        
        int graph[][] = new int[numVertices][numVertices];
        
        System.out.println("Enter the adjacency matrix (0 for no edge, 1 for edge exists):");
        for (int i = 0; i < numVertices; i++) {
            for (int j = 0; j < numVertices; j++) {
                graph[i][j] = sc.nextInt();
            }
        }
        
        WarshallAlgorithm wa = new WarshallAlgorithm();
        wa.warshall(graph, numVertices);
    }
}


